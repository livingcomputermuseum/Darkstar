head     1.1;
branch   1.1.1;
access   ;
symbols  start:1.1.1.1 Xerox:1.1.1;
locks    ; strict;
comment  @;; @;


1.1
date     2001.08.12.22.22.11;  author freier;  state Exp;
branches 1.1.1.1;
next     ;

1.1.1.1
date     2001.08.12.22.22.11;  author freier;  state Exp;
branches ;
next     ;


desc
@@



1.1
log
@Initial revision
@
text
@; Copyright (C) 1980  by Xerox Corporation. All rights reserved. 	        GET	"SysDefs.asm"	get "MOONLInKDefs.asm"	; LInK defs        GET	"MOONRS232CDefs.Asm"        ;  EXPORTS:	    EXP ErrorReturn,RS232SetUp,RxDisable;  IMPORTS :	IMP	RS232CTest3	        ;-----------------------------------------------------------------VCont:	equ	0C0H	; Voice Control Register I/O AddressRxWR0:	DB	0HRxWR3:	DB	RxBC8+RxCRCEnTxWR0:	DB	0HTxWR5:	DB	TxBC8+TxCRCEn+RTS+DTRTest: 	db	0H	PassCount: 	db	0H	IncData: 	db	0H	StopOnErr: 	db	0H	LSpeed: 	db	0H	USpeed: 	db	0H	Retry: 	db	0H	OutData: 	db	0H	InData: 	db	0H	Rs232Error: 	db	0H	       RS232SetUp:	call ExtMonitorKeyIn          DI	LXI	SP,UserStkStart	MVI	A,0		sta     InData        sta     Rs232Error        call ExtTEIIndexAdd   ; Returns with TestN * 16 + EIBuffer in h and l        mov	a,m		;          sta     Test        inx     h        mov	a,m		;          sta     PassCount        inx     h        mov	a,m		;          sta     IncData	inx     h        mov	a,m		;          sta     StopOnErr	inx     h        mov	a,m		;          sta     USpeed	inx     h        mov	a,m		;          sta     LSpeed	inx     h        mov	a,m		;          sta     Retry	mvi e,6        mvi d,0        dad d                     mov	a,m		;          ani      1FH        sta     OutData	mvi   a,0        out	VCont        CALL	RxDisable	CALL	TxDisable        lda   Test        cpi 1        jnz   StartRs232        CALL	RS366LoopTest        CALL	ExtTimeDelay        JMP	LogitStartRs232:	cpi 3	jnz   StartRs232A        CALL	ExtLoop               JMP	LogitStartRs232A:        cpi 4        jz   StartRs232M        CALL	RS232CTest2        lda   Test        cpi 8        jz   StartRs232SM	MVI	A,SIOLpEn+LocalTim	; Enable Internal Loop Back	OUT	RS366Reg        lda Retry	mov  b,a        mvi a,0        lhld  LSpeed	CALL	RS232CTest3        lda   Test        cpi 0        jz   Logit	StartRs232SM:	MVI	A,LocalTim		; Enable External Loop Back	OUT	RS366Reg	lda Retry	mov  b,a        lda Test	lhld  LSpeed	CALL	RS232CTest3	JMP	LogitStartRs232M:	CALL	RS232CTest2        MVI	A,0		; Enable External Loop Back	OUT	RS366Reg	lda Retry	mov  b,a        lda Test	lhld  LSpeed        CALL	RS232CTest3	JMP	LogitLogit:	LXI	SP,UserStkStart	CALL	RxDisable	CALL	TxDisable       call ExtTEIIndexAdd   ; Returns with TestN * 16 + EIBuffer in h and l       mvi e,13       mvi d,0       dad d                    lda OutData       mov	m,a		;         inx  h       lda InData       mov	m,a		;         inx  h       lda Rs232Error       mov	m,a		;         lda   StopOnErr       cpi 0       jnz   RS232SetUp       JMP  ExtMonitorTestDone; This is test program for RS232C Diagnostic Loop Back.; Both internal and external loop-back should be tested by the program.; Follwing signals will be tested.; Internal Loop Back:; PrimRTS' ->PrimCTS', SecRTS'->SecCTS'; External Loop Back:; PrimRTS'->PrimCTS', SecRTS->SecCTS'; PrimRTS'->PrimDCD', SecRTS->SecDCD'; DTReady'->DataSetRdy  (Inverted); NB1'->PWI , NB2'->ACR, NB4'->COS; NB8'->PND, DPR->DLO; ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~; - Created : July 10, 1980  1:47 PM By Ken KXY     ; - Last Modified : November 21, 1980  11:37 AM By Ken KXY     ; ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~	RS232CTest2:;SIOLoopTest:	MVI	A,DisableFDC	;  Enable Wait cycles	OUT	FDCState	MVI	A,SIOLpEn+LocalTim	; Enable Internal Loop Back	OUT	RS366RegSIORegTest:	MVI	A,ChRst	OUT	ChACont	OUT	ChBCont	MVI	A,REG2	OUT	ChBCont	MVI	A,0H	OUT	ChBCont	MVI	A,REG2	OUT	ChBCont	IN	ChBCont	ANI	0F1H	CPI	0H	JNZ	SIOError	MVI	A,REG2	OUT	ChBCont	MVI	A,0F1H	OUT	ChBCont	MVI	A,REG2	OUT	ChBCont	IN	ChBCont	ANI	0F1H	CPI	0F1H	JNZ	SIOError	MVI	A,REG5		; Set RTS bit of SIO Bch	OUT	ChBCont	MVI	A,RTS	OUT	ChBCont	MVI	A,REG5		; Set RTS bit of SIO Ach	OUT	ChACont	MVI	A,RTS	OUT	ChACont	MVI	A,RstEInt		; Reset Ext Int, To Read RR0	OUT	ChACont	IN	ChACont		; Read CTS bit of SIO Ach	ANI	CTS		; CTS must be 1	JZ	CTSA1Error	MVI	A,RstEInt		; Reset Ext Int, To Read RR0	OUT	ChBCont	IN	ChBCont		; Read CTS bit of SIO Ach	ANI	CTS		; CTS must be 1	JZ	CTSB1Error	MVI	A,REG5		; Reset RTS bit of SIO Bch	OUT	ChBCont	MVI	A,0H	OUT	ChBCont	MVI	A,REG5		; Reset RTS bit of SIO Bch	OUT	ChACont	MVI	A,0H	OUT	ChACont	MVI	A,RstEInt		; Reset Ext Int, To Read RR0	OUT	ChACont	IN	ChACont		; Read CTS bit of SIO Ach	ANI	CTS		; CTS must be 0	JNZ	CTSA0Error	MVI	A,RstEInt		; Reset Ext Int, To Read RR0	OUT	ChBCont	IN	ChBCont		; Read CTS bit of SIO Bch	ANI	CTS		; CTS must be 0	JNZ	CTSB0Error	ret         ExtLoop:		MVI	A,SIOLpEn	; Disble Internal Loop Back	OUT	RS366Reg	MVI	A,REG5		; Set RTS bit of SIO Bch	OUT	ChBCont	MVI	A,RTS	OUT	ChBCont	MVI	A,REG5		; Set RTS bit of SIO Ach	OUT	ChACont	MVI	A,RTS	OUT	ChACont        SIOChAStatus1Test:	MVI	A,RstEInt		; Reset Ext Int, To Read RR0	OUT	ChACont	IN	ChACont		; Read CTS bit of SIO Ach	ANI	CTS+DCD		; CTS must be 1	CPI	CTS+DCD	JNZ	ECTSA1ErrorSIOChBStatus1Test:	MVI	A,RstEInt		; Reset Ext Int, To Read RR0	OUT	ChBCont	IN	ChBCont		; Read CTS bit of SIO Ach	ANI	CTS+DCD		; CTS must be 1	CPI	CTS+DCD	JNZ	ECTSB1Error        jmp     SIOChAStatus0Test	SIOChAStatus0Test:	MVI	A,REG5		; Reset RTS bit of SIO Bch	OUT	ChBCont	MVI	A,0H	OUT	ChBCont	MVI	A,REG5		; Reset RTS bit of SIO Bch	OUT	ChACont	MVI	A,0H	OUT	ChACont                MVI	A,RstEInt		; Reset Ext Int, To Read RR0	OUT	ChACont	IN	ChACont		; Read CTS bit of SIO Ach	ANI	CTS+DCD		; CTS must be 0	JNZ	ECTSA0ErrorSIOChBStatus0Test:	MVI	A,RstEInt		; Reset Ext Int, To Read RR0	OUT	ChBCont	IN	ChBCont		; Read CTS bit of SIO Bch	ANI	CTS+DCD		; CTS must be 0	JNZ	ECTSB0Error        jmp     RS366Bit1Test          RS366Bit1Test:	MVI	A,REG5	OUT	ChBCont	MVI	A,DTR		; RS366Loop Bit 1 (DTR/DSR)Test	OUT	ChBCont        call    ExtStartDelay	       	IN	RS366Reg	ANI	40H	JZ	BIT1Error	MVI	A,REG5	OUT	ChBCont	MVI	A,0H	OUT	ChBCont        call    ExtStartDelay	        IN	RS366Reg	ANI	40H	JNZ	BIT1Error	retRS366LoopTest:	lda	OutData		; RS366Loop Bit 7 Test	mov     e,a        OUT	RS366Reg	IN	RS366Reg	ani      1FH        xri	1FH	sta     InData        xra	e	JNZ	DataErr	lda     IncData        cpi     1        jnz     RS366LoopTest2        lda     OutData        inr a        ani      1FH        sta     OutDataRS366LoopTest2:		        lda     PassCount        dcr     a        sta     PassCount        cpi     0        jnz     RS366LoopTest        RETSIOError:	MVI	L,1	JMP	ErrorReturn	; E¬ ConditionCTSA0Error:	MVI	L,2	JMP	ErrorReturn	; E¬ ConditionCTSB0Error:	MVI	L,3	JMP	ErrorReturn	; E¬ ConditionCTSA1Error:	MVI	L,4	JMP	ErrorReturn	; E¬ ConditionCTSB1Error:	MVI	L,5	JMP	ErrorReturn	; E¬ ConditionECTSA0Error:	MVI	L,11	JMP	ErrorReturn	; E¬ ConditionECTSB0Error:	MVI	L,12	JMP	ErrorReturn	; E¬ ConditionECTSA1Error:	MVI	L,13	JMP	ErrorReturn	; E¬ ConditionECTSB1Error:	MVI	L,14	JMP	ErrorReturn	; E¬ ConditionBIT1Error:	MVI	L,15	JMP	ErrorReturnDataErr:	MVI	L,1	lda     InData	JMP	ErrorReturnErrorReturn:	sta InData	MOV	a,l	sta Rs232Error	jmp LogitRxDisable:	MVI	A,ChRst	OUT	ChACont	MVI	A,REG4	OUT	ChACont		; WR4-Ach selected	MVI	A,0	OUT	ChACont			MVI	A,REG5+RstEInt	; WR5-Ach selected	OUT	ChACont		; and Ext. Status Int Reset 	MVI	A,0		OUT	ChACont			MVI	A,REG6			OUT	ChACont	MVI	A,0	OUT	ChACont	MVI	A,REG7	OUT	ChACont	MVI	A,0	OUT	ChACont	MVI	A,REG1+RstEInt	OUT	ChACont		; WR3-Ach selected	MVI	A,0	OUT	ChACont        MVI	A,REG3+RstRxCRC	OUT	ChACont	MVI	A,0	OUT	ChACont	RetTxDisable:	MVI	A,ChRst	OUT	ChBCont	MVI	A,REG2	OUT	ChBCont		; Write Interrupt vector	MVI	A,0H	OUT	ChBCont	MVI	A,REG4	OUT	ChBCont		; Ext. Status Int Reset & REG4 Select	MVI	A,0	OUT	ChBCont		;	MVI	A,REG1+RstEInt	OUT	ChBCont		; WR1-Bch Select	MVI	A,0	OUT	ChBCont		; External Int Disabled        MVI	A,REG5	OUT	ChBCont		; WR5-Bch Select	MVI	A,0	OUT	ChBCont		; Set Data to REG5	RET	END@


1.1.1.1
log
@first add
@
text
@@
