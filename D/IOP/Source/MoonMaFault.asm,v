head     1.1;
branch   1.1.1;
access   ;
symbols  start:1.1.1.1 Xerox:1.1.1;
locks    ; strict;
comment  @;; @;


1.1
date     2001.08.12.22.22.10;  author freier;  state Exp;
branches 1.1.1.1;
next     ;

1.1.1.1
date     2001.08.12.22.22.10;  author freier;  state Exp;
branches ;
next     ;


desc
@@



1.1
log
@Initial revision
@
text
@; Copyright (C) 1980  by Xerox Corporation. All rights reserved. ;	- Created (June 4, 1980  12:59 PM)	get "SysDefs.asm"	; system defs (tests defs below)        get "MOONBootDefs.asm"	; system defs (tests defs below)        get "MOONBootLinkDefs.asm"	; system defs (tests defs below)        get "MOONLinkDefs.asm"	; system links         get "MOONSysDefs.asm"	; system defs        ;-----------------------------------------------------------------	jmp AFault        jmp ARestore        jmp AShowErrors        jmp SetSize          jmp AClrLogExtPAGES equ ExtBANKS+1ExtWORDS equ ExtPAGES+1ExtBANKE equ ExtWORDS+1ExtPAGEE equ ExtBANKE+1ExtWORDE equ ExtPAGEE+1ExtUSEED equ ExtWORDE+1ExtLSEED equ ExtUSEED+1ExtSTYPE equ ExtLSEED+1ExtMBANKE equ ExtSTYPE+1ExtMPAGEE equ ExtMBANKE+1ExtTEST equ ExtMPAGEE+1ExtREFCONTROL equ ExtTEST+1ExtMCTLDATA equ ExtREFCONTROL+1ExtMAP equ ExtMCTLDATA+1ExtPASSCOUNT equ ExtMAP+1ExtSTOPONERR equ ExtPASSCOUNT+1ExtDELAYV equ ExtSTOPONERR+1ExtWBANKS equ ExtDELAYV+1ExtWPAGES equ ExtWBANKS+1ExtWWORDS equ ExtWPAGES+1ExtUWSEED equ ExtWWORDS+1ExtLWSEED equ ExtUWSEED+1ExtTYPE equ ExtLWSEED+1ExtUEXPECTED equ ExtTYPE+1ExtLEXPECTED equ ExtUEXPECTED+1ExtUOBSERVED equ ExtLEXPECTED+1ExtLOBSERVED equ ExtUOBSERVED+1       ;---------------- START of Program -------------------------IntBANKS   db 0 IntPAGES   db 0 IntWORDS   db 0 IntBANKE   db 0 IntPAGEE   db 0 IntWORDE   db 0 IntUSEED   db 0 IntLSEED   db 0 IntSTYPE   db 0 IntMBANKE   db 0 IntMPAGEE   db 0 IntTEST   db 0 IntREFCONTROL   db 0 IntMCTLDATA   db 0 IntMAP   db 0 IntPASSCOUNT   db 0 IntSTOPONERR   db 0 IntDELAYV   db 0 IntWBANKS   db 0 IntWPAGES   db 0 IntWWORDS   db 0 IntUWSEED   db 0 IntLWSEED   db 0 IntTYPE   db 0 IntUEXPECTED   db 0 IntLEXPECTED   db 0 IntUOBSERVED   db 0 IntLOBSERVED   db 0 IntFAULT   db 0 IntNODATAINC   db 0 IntNOTYPEINC   db 0 IntNotused   db 0PCount   db 0 CBank   db 0CPage   db 0 EndPageM   db 0CPointer   db 0SecPass   db 0   ;  Main command loop.AFault:call AESave   ; Returns with TestN * 16 + EIBuffer in h and l       lda AFlag       cpi 0       jz	ExtShowError       lda AInPF       cpi 0       jz	AStart       retAStart:        lda  ExtFault        cpi 0        jz    ExtShowError        call  AClrLog        call  ASave        mvi	a,2		        sta   AInPFAStart1:        sta   SecPass        call  ADataSetUp        call  ADataTest        call  ABDataTest        lda SecPass        cpi 0        jz  ExtMonitorSTOP        dcr a        jmp AStart1ADataSetUp:        lda IntUWSEED        sta ExtUSEED        lda IntLWSEED        sta ExtLSEED        lda IntTYPE        sta ExtSTYPE        mvi a,1        sta ExtNODATAINC        sta ExtNOTYPEINC        sta ExtMCTLDATA        sta ExtMAP        sta ExtPASSCOUNT        mvi a,0        sta ExtSTOPONERR        mvi a,2        sta ExtTest        lda SecPass        cpi 2        rz        cpi 0        jz  ADataSetUp2ADataSetUp1:        lda IntUWSEED        xri 0FFH        sta ExtUSEED        lda IntLWSEED        xri 0FFH        sta ExtLSEED        retADataSetUp2:        lda IntUWSEED        xri 0AAH        sta ExtUSEED        lda IntLWSEED        xri 0AAH        sta ExtLSEED        retADataTest:        mvi a,5        sta PCountADataTest1:        call AERestore        call ExtEITestLoop        lda ExtUEXPECTED        mov e,a        lda ExtUOBSERVED        xra e        jnz  ADataTest5        lda ExtLEXPECTED        mov e,a        lda ExtLOBSERVED        xra e        jnz  ADataTest5        lda ExtFault        cpi 4        jz ADoMarkECC        lda ExtMCTLDATA        ani 0FCH        jz  ADataTest4        jmp ADataTest3ADataTest2:        lda PCount        dcr a        rz        sta PCount        jmp ADataTest1ADataTest3:        lda ExtMCTLDATA        ani 0FCH        ral        ori 1        sta ExtMCTLDATA        jmp ADataTest2ADataTest4:        mvi a,5        sta  ExtMCTLDATA        sta PCount        jmp ADataTest1ADataTest5:        call AMarkDataBad        jmp  ADataTest2ADoMarkECC:        lda Conf        ani 1        jnz MarkParity        lda ExtUEXPECTED        sta ExtUSEED        lda ExtLEXPECTED        sta ExtLSEED        lda ExtWBANKS        sta ExtBANKS        sta ExtBANKE        lda ExtWPAGES        sta ExtPAGES        sta ExtPAGEE        lda ExtWWORDS        sta ExtWORDS        sta ExtWORDE        mvi a,0        sta ExtSTYPE        mvi a,5        sta ExtMCTLDATAADoMarkECC1:        call AERestore        call ExtEITestLoop        lda  ExtFault        cpi 4        jz ADoMarkECC2        lda ExtBANKS        sta ExtWBANKS        lda ExtPAGES        sta ExtWPAGES        call AMarkECCBadADoMarkECC2:        lda ExtMCTLDATA        ani 0FCH        ral        jnc ADoMarkECC3        retADoMarkECC3:        ori 1        sta ExtMCTLDATA        jmp  ADoMarkECC1ABDataTest:        lda IntBANKS        sta CBank        lda IntPAGES        sta CPage        lda IntPAGEE        sta EndPageM	lda Conf        ani 1        jnz ABDataTest1	lda IntBANKE	sui 6	jp  ABDataTest1        lda IntPAGEE        ani 3FH        sta EndPageMABDataTest1:        call ARestore        call AESave   ; Returns with TestN * 16 + EIBuffer in h and l        call ADataSetUp        lda CBank        sta ExtBANKS        sta ExtBANKE        lda CPage        sta ExtPAGES	lda Conf        ani 1        jnz ABDataTest2	lda IntBANKE	sui 6	jp  ABDataTest2        lda CPage        ani 0C0H        mov e,a        lda EndPageM        ora e        sta ExtPAGEE        call ADataTest        lda IntPAGEE        ani 0C0H        mov e,a        lda CPage        ani 0C0H        cmp e        jnz IncBank        lda IntBANKE        mov e,a        lda CBank        cmp e        rz IncBank:        lda CBank        mov h,a        lda CPage        mov l,a        mvi d,0        mvi e,40        dad d        mov a,h        sta CBank        mov a,l        sta CPage        jmp ABDataTest1		ABDataTest2:        lda EndPageM        sta ExtPAGEE        call ADataTest        lda IntBANKE        mov e,a        lda CBank        cmp e        rz         inr a        sta CBank	lda IntBANKE        ani 0F0H        jz ABDataTest1        lda CBank        adi  3	sta CBank	sub e	jz ABDataTest1	jm ABDataTest1	ret	     AMarkDataBad:        lda ExtUEXPECTED        mov e,a        lda ExtUOBSERVED        xra  e        mov b,a        lda ExtUSEED        xra  b        sta ExtUSEED        mvi c,0        call AMarkIt        lda ExtLEXPECTED        mov e,a        lda ExtLOBSERVED        xra  e        mov b,a        lda ExtLSEED        xra  b        sta ExtLSEED        mvi c,1        call AMarkIt        retAMarkECCBad:        lda ExtMCTLDATA        ani 0FCH        mov b,aAMarkECCBad1:        mvi c,2        call AMarkIt	retMarkParity:        mvi  b,80H        jmp AMarkECCBad1	AMarkIt:        lda Conf        ani 1        jnz AMark64	lda IntBANKE	sui 6	jp  AMark64        lda ExtWBANKS        rlc        rlc        mov d,a        lda ExtWPAGES        ani 0C0H        rlc        rlc        ora d	jmp AMark16AMark64:        lda ExtWBANKSAMark16:        lxi h, FloppyBuf        mvi d,0        mvi e,3AMarkIt1:        cpi 0        jz AMarkIt2        dad d        dcr a        jmp AMarkIt1AMarkIt2:        mov e,c        dad d        mov a,m        ora b        mov m,a        retACOMPERR:   mvi a,0   sta CPointer   sta PCount ACOMPERR1:   call AGetData   lda PCount   mov d,a   mov a,e   call CountIt   mov a,b   call CountIt   mov a,c   call CountIt   mov a,d   sta PCount   lda CPointer   inr a   cpi 64   rz   sta CPointer   jmp ACOMPERR1CountIt:   mvi l,8CountIt1:   rlc   jnc CountIt2   inr dCountIt2:   dcr l   rz   jmp CountIt1                      AShowErrors:   call ACOMPERR    mvi a,0   sta CPointer   call  ExtBlankIt   lda PCount   mov l,a   mvi h,0   call DecOut   lda KBBuffer   sta PCountAShowErrors1:   call SetUpper   shld IntBANKS   call AGetData   mov a,e   ora b   ora c   jz AShowErrors2   call  ExtBlankIt   lda PCount   cpi KSP   jz Dec   lda CPointer   sta  AccuReg   call OutPutR   lda AccuReg   sta  CPointer   lda KBBuffer   cpi KSP   rz     call AGetData   mov a,e   sta  AccuReg   call OutPutR   lda KBBuffer   cpi KSP   rz     mov a,b   sta  AccuReg   call OutPutR   lda KBBuffer   cpi KSP   rz     mov a,c   sta  AccuReg   call OutPutR   lda KBBuffer   cpi KSP   rz  AShowErrors2:   lda CPointer   inr a   cpi 64   rz   sta CPointer   jmp AShowErrors1SetUpper:   mvi h,0   mvi l,0   mvi d,0   mvi e,100   lda CPointerSetUpper1:   cpi 0   rz    dad d   dcr a   jmp SetUpper1Dec:   mvi d,0Dec1:   mov a,e   call GetBit   ani 80H   jz Dec2   mvi a,0   call Merge   rz  Dec2:   inr d   mov a,d   cpi 8   jnz Dec1   mvi d,0Dec3:   mov a,b   call GetBit   ani 80H   jz Dec4   mvi a,8   call Merge   rz  Dec4:   inr d   mov a,d   cpi 8   jnz Dec3   mvi d,0Dec5:   mov a,c   call GetBit   ani 80H   jz Dec6   mvi a,16   call Merge   rz  Dec6:   inr d   mov a,d   cpi 8   jnz Dec5   jmp AShowErrors2Merge:   push d   add d   mov e,a   mvi d,0   lhld IntBANKS   dad d   call DecOut   pop d   lda KBBuffer   cpi KSP   retGetBit:   mov l,a   mov h,d   cpi 0   jz GetBit2   mov a,lGetBit1:   rlc   dcr h   jnz GetBit1   retGetBit2:   mov a,l   retOutPutR:   push b   push d   call ExtEIAccuH   pop d    pop b    retDecOut:       push b   push d   call  ExtMPNumberCall   pop d    pop b DecOut1:       push b   push d   call  ExtMonitorKeyIn   pop d    pop b    lda KBBuffer   cpi KCR   rz   cpi KSP   rz   jmp  DecOut1AGetData:   lxi h, FloppyBuf   mvi d,0   mvi e,3   lda CPointerAGetData1:   cpi 0   jz AGetData2   dad d   dcr a   jmp AGetData1AGetData2:   mov e,m   inx h   mov b,m   inx h   mov c,m   mvi h,0   mvi l,6   mov a,cAMask:   rlc   jnc AMask1   inr hAMask1:   dcr l   jnz AMask   mov a,h   cpi 4   jnz AMask2   mov a,c   xri 0FCH   mov c,aAMask2:   retASave:       call ExtTEIIndexAdd   ; Returns with TestN * 16 + EIBuffer in h and l       xchg       lxi	h,IntBANKS       call	AMoveIt       retARestore:       call ExtTEIIndexAdd   ; Returns with TestN * 16 + EIBuffer in h and l       xchg       lxi	h,IntBANKS       xchg       call	AMoveIt       retAESave:       call ExtTEIIndexAdd   ; Returns with TestN * 16 + EIBuffer in h and l       xchg       lxi	h,ExtBANKS       call	AMoveIt       retAERestore:       call ExtTEIIndexAdd   ; Returns with TestN * 16 + EIBuffer in h and l       xchg       lxi	h,ExtBANKS       xchg       call	AMoveIt       retAMoveIt:        xchg	mvi	b,32		AMoveIt1:	mov	a,m		;  Get low byte	inx	h		;  Point to next byte	xchg	mov	m,a		;  Store	inx	h		;  Point to next byte	dcr	b	rz			;  z => no more bytes	xchg	jmp	AMoveIt1AClrLog:   lxi h, FloppyBuf   mvi c,0   mvi a,256AClrLog1:   mov m,c   inx h   dcr a   rz    jmp AClrLog1SetSize:   lda MemSize1   cpi 0FEH   jz  ExtMonitorSetP   sta IntBANKE   lda MemSize   sta IntBANKS   call AESave   lda ExtBANKS   ani 7FH   sta ExtBANKS   lda TestN   cpi 10   jz SetSize1   cpi 11   jz SetSize3   cpi 12   jz SetSize3   cpi 13   jz SetSize3   lda ExtMCTLDATA   ori 1   sta ExtMCTLDATASetSize1:   lda TestN   cpi 14   jnz SetSize2   mvi a,30   sta ExtDELAYVSetSize2:   call Size   call Fast   call Dubble   call TECC   call ParityMem   call Refresh   call AERestore   lda TestN   cpi 14   jz ExtMonitorSt   inr a   sta TestN   jmp SetSizeSetSize3:   mvi a,0FFH   sta ExtPAGEE   sta ExtWORDE   jmp SetSize1Size:   lda IntBANKS   sta ExtBANKS   sta ExtBANKE   lda TestN   cpi 10   rz   cpi 11   jz Size2   cpi 12   jz Size2   cpi 13   jnz Size3Size2:   lda ConfiguerF   cpi 2   jz Size4   cpi 3   jnz Size3Size4:   mvi a,0   sta ExtPAGEE   sta ExtWORDE   retSize3:   lda IntBANKE   sta ExtBANKE    retSkipIt:   lda ExtBANKS   ori 80H   sta ExtBANKS   ret   Fast:   lda ConfiguerF   cpi 1   jz Fast1   cpi 3   rnzFast1:   lda TestN   cpi 4   jz SkipIt   cpi 6   jz SkipIt   cpi 8   jz SkipIt   cpi 9   jz SkipIt   cpi 11   jz SkipIt   cpi 13   jz SkipIt   retDubble:   lda ConfiguerF   cpi 2   jz Dubble1   cpi 3   rnzDubble1:   lda ExtMCTLDATA   ani 0FEH   sta ExtMCTLDATA   lda TestN   cpi 14   rnz   mvi a,60   sta ExtDELAYV   ret   ParityMem:   lda Conf   ani 1   rz   lda TestN   cpi 11   jz SkipIt   cpi 12   jz SkipIt    cpi 13   jz SkipIt    cpi 10   rnz    mvi  a,0FCH   sta ExtMCTLDATA   retTECC:   lda ConfiguerF   cpi 4   rnz   lda TestN   cpi 10   rz    cpi 11   rz    cpi 12   rz    cpi 13   rz    jmp SkipItRefresh:   lda ConfiguerF   cpi 5   rnz   lda TestN   cpi 14   rz    jmp SkipIt   end@


1.1.1.1
log
@first add
@
text
@@
