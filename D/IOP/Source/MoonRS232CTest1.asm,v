head     1.1;
branch   1.1.1;
access   ;
symbols  start:1.1.1.1 Xerox:1.1.1;
locks    ; strict;
comment  @;; @;


1.1
date     2001.08.12.22.22.11;  author freier;  state Exp;
branches 1.1.1.1;
next     ;

1.1.1.1
date     2001.08.12.22.22.11;  author freier;  state Exp;
branches ;
next     ;


desc
@@



1.1
log
@Initial revision
@
text
@; Copyright (C) 1980  by Xerox Corporation. All rights reserved. 	        GET	"SysDefs.asm"	GET	"MOONRS232CDefs.Asm"	get "MOONLinkDefs.asm"	; system links ;  EXPORTS:	    EXP RS232CTest3;  IMPORTS :	IMP	ErrorReturn,RxDisable 	        ;-----------------------------------------------------------------Timeout: 	db	0H	Timeout1: 	db	0H	SendWord: 	db	0H	RecieveWord: 	db	0H	SaveIt: 	db	0H	Retry: 	db	0H	TxCNT: 	dw	0H	RxCNT: 	dw	0H	 		      RS232CTest3:	sta     SaveIt        mov     a,b	sta     RetryOSCInit:	MVI	A,TxCMD		; Frequncy and Mode Set to i8253 (for Tx)	OUT	OSCCont		; Counter#1, LSB & MSB, Mode3, Binary	MOV	A,l	OUT	TxReg	MOV	A,h	OUT	TxReg	MVI	A,RxCMD		; Frequncy and Mode Set to i8253 (for Rx)	OUT	OSCCont		; Counter#2, LSB & MSB, Mode3, Binary	MOV	A,l	OUT	RxReg	MOV	A,h	OUT	RxReg	call   SIOInit	call   RxInitTxInit:	MVI	A,ChRst	OUT	ChBCont		; Channel B Reset	MVI	A,REG2	OUT	ChBCont		; Write Interrupt vector	MVI	A,0H	OUT	ChBCont	MVI	A,REG4	OUT	ChBCont		; Ext. Status Int Reset & REG4 Select	lda     SaveIt	cpi     8	jnz     TxInit1	MVI	A,Clk1X+Stop1	jmp     TxInit2TxInit1:        MVI	A,Clk1X+SDLCMTxInit2:	OUT	ChBCont		; Set Data to REG4        MVI	A,REG1+RstEInt	OUT	ChBCont		; WR1-Bch Select	MVI	A,SAVect+TxIntEn+ExIntEn	OUT	ChBCont		; External Int DisabledTxRxOn:	MVI	A,REG5	OUT	ChBCont		; WR5-Bch Select	MVI	A,DTR+TxBC8+TxEn+RTS+TxCRCEn	OUT	ChBCont		; Set Data to REG5TxRxOn1:		Call    WaitDSR     	call   ExtTimeDelay        Call    WaitCTS     	call   ExtTimeDelay        MVI	A,RstTxIP		; #Reset Tx Int Pending Latch	OUT	ChACont        OUT	ChBCont		;#	MVI	A,ERRst		OUT	ChACont        OUT	ChBCont	MVI	A,RstTxGen	; Reset Tx CRC Generator	OUT	ChACont        OUT	ChBCont	MVI	A,RstEInt		; Reset External Interrupt of Ch-A	OUT	ChACont	MVI	A,RETI		; Reset SIO Int service F/F	OUT	ChACont		; RETI Command=Channel A ONLY	jmp     BTransmitA    	; [ INTERRUPTION PROCESSING SECTION ]              IntWait:        lxi  d,0	IntWait1:        IN   IntReg		; INT From SIO?	ANI  SIOInt	JZ   VectorRead        inx  d        mov  a,d        cpi  0FH        jnz  IntWait1          jmp  NoSioINt	VectorRead:	MVI	A,REG2		; INT VECTOR READ	OUT	ChBCont		; Try reading 2times avoiding read error	IN	ChBCont	ANI	AffectMask		; Pick up Affect Vector        			VectChange:	jz	BTransmit	cpi     0CHVectChange1:	JZ     AReceive	cpi     0AH	JZ     AExtStat	RLC			; Interrupt Facter detection	MOV	C,A		; Jump Adrs¬Int Fact conversion	MVI	B,0H	LXI	H,JTABLE		; PC¬JTABLE+(Affect Vector)x2	DAD	B	PCHLJTABLE:	JMP	TSeqError		; When Vecter =0	NOP	JMP	BExtStat		; When Vecter =2	NOP	JMP	BadInt		; When Vecter =4	NOP	JMP	BSpecial		; When Vecter =6	NOP	JMP	BadInt		; When Vecter =8	NOP	JMP	AExtStat		; When Vecter =A	NOP	JMP	AReceive		; When Vecter =C	NOP	JMP	ASpecial		; When Vecter =EReRout:       jz BTransmit	ReRout1:       jz BDone	ReRout2:       jz BTxTermReRout3:       jz TSeqErrorReRout4:       jz AReceiveReRout5:       jz ASyncEndBTransmitA:        Lhld	TxCNT		; DATA TRANSMITTION Bch	mov     a,m	OUT	ChBData  	MVI	A,RstTxEOM	; Reset Tx UnderRun Command	OUT	ChBCont        MVI	A,RstEInt		; Reset External Interrupt of Ch-B	OUT	ChBCont		jmp	BTransmit1		BTransmit:        Lhld	TxCNT		; DATA TRANSMITTION Bch	mov     a,m	OUT	ChBData  BTransmit1:	LDA	TxCNT        INR	A        STA	TxCNT        CPI	0FDH	JNZ     IntWait	lhld    ReRout1+1	shld    VectChange+1        jmp     IntWait	BDone:	        MVI	A,RstTxIP		; Reset Tx Int Pending Latch	OUT	ChBCont	lhld    ReRout2+1	shld    VectChange+1	lda   SaveIt	cpi      8	jnz      BTransmit1	lhld    ReRout5+1	shld    VectChange1+1	JMP      BTransmit1        	BTxTerm:	MVI	A,RstTxIP		; #Reset Tx Int Pending Latch	OUT	ChBCont		;#	lhld    ReRout3+1	shld    VectChange+1	JMP      BTransmit1AReceive:	Lhld	RxCNT			IN	ChAData		; Receive one character	MOV	m,a	LDA	RxCNT        INR	A        STA	RxCNT		;JZ	RSeqError	ChainRstA:	MVI	A,RETI		; Reset SIO Int service F/F	OUT	ChACont		; RETI Command=Channel A ONLY	jmp     IntWait 		; [ EXTERNAL/STATUS  PROCESSING SECTION 1 ]AExtStat:	;call    ExtMonitorKeyIn        IN	ChACont		; Read Channel A Status	MOV	b,a	ANI	BkABT+SyncHunt+DCD	CPI      DCD	JNZ     ADCDCKAExtSExit:        MVI	A,RstEInt		; Reset External Interrupt of Ch-A	OUT	ChACont	jmp     ChainRstAADCDCK:	Lda   TxCNT	cpi    0FEH	JnZ	AExtSExit	MOV	a,b	ANI	DCD	Jz	RxError1	MOV	a,b	ANI	SyncHunt	JnZ	LostSync	MOV	a,b	ANI	BkABT	JnZ	BkRtn	jmp	UnExpAStatIntBExtStat:	IN	ChBCont		; Read Channel B Status	mov     b,a		ANI	TxURun			JZ	BExtStat1	MVI	A,RstTxEOM	; Reset Tx UnderRun Command	OUT	ChBCont	Lda   TxCNT	cpi    0FEH	jz    BExtStat1	JMP	TxErrorBExtStat1:	lda     SaveIt          cpi     0        jz    BextStatExit  BExtStat2:        MOV	A,b			ANI	CTS	JZ	RxError3	Lda   TxCNT	cpi    0FEH	jz    BextStatExit	jmp    UnExpBStatInt	BextStatExit:        MVI	A,RstEInt		; Reset External Interrupt of Ch-B	OUT	ChBCont		JMP	IntWait              ; [SPECIAL CONDITION PROCESSING SECTION]ASpecial:	;call    ExtMonitorKeyIn        MVI	A,REG1		; AChannel Special Condition Check	OUT	ChACont		; Read 2 Times to avoid read error	IN	ChACont	MOV	B,A        ANI	CRCErr+RxORun+ParityErr+EOF	JNZ	EOFRtn1		; IF Yes, Done or error	JMP	UnExpASpecInt		; IF No, go to Unexpect Asp int err	BSpecial:	;call    ExtMonitorKeyIn        ;MVI	A,REG1		; BChannel Special Condition Check	;OUT	ChBCont		; Read 2 Times to avoid read error	;IN	ChBCont	;MOV	B,A	;ANI	EOF	;JNZ	EOFRtn		; IF EOF, Receive END	;MOV	a,b	;ANI	CRCErr+RxORun+ParityErr+EOF	JMP	UnExpBSpecInt		; IF Yes, Error ConditionASyncEnd:	Lhld	RxCNT			IN	ChAData		; Receive one character	MOV	m,a	LDA	RxCNT        INR	A        STA	RxCNT		Cpi      0FDH	Jnz	ChainRstA        MVI	A,REG1		; AChannel Special Condition Check	OUT	ChACont		; Read 2 Times to avoid read error	IN	ChACont	MOV	B,A	jmp     EOFRtn1		; [ PROGRAM  TERMINATE SECTION ]EOFRtn:	LDA	RxCNT		; Transmit completely End?	Cpi      0FEH	Jnz	BadEndEOFRtn1:	MOV	a,b	ANI	CRCErr	JNZ	RecCRCError	MOV	a,b	ANI	RxORun	JNZ	RecRxORun	MOV	a,b	ANI	ParityErr	JNZ	RecParityErr	CALL	RxDisable	CheckB:	lxi     h,RBuffer        lxi     d,TBufferCheckB1:	MOV      a,m       ; sta   MemSize1	MOV      b,a        xchg        	MOV      a,m	;sta   MemSize	xchg	xra      b        jnz     DataErr        inx      h	inx      d	mov      a,l        cpi     0FDH	RZ	JMP     CheckB1DataErr:        mov     a,l	;sta   Conf	cpi   0	jz   ADRSError 	cpi    0FCH	JZ    ETXError 	JMP   DataError WaitCTS:        lda  SaveIt          cpi     0        rz                         lxi	h,0	;  ConstantWaitCTSLoop:	MVI	A,RstEInt		; Reset External Interrupt of Ch-B	OUT	ChBCont		IN	ChBCont		; Read Channel B Status	ANI	CTS	rnz        dcx	h	mov	a,l		;  Check low	cpi	0	jnz	WaitCTSLoop	mov	a,h		;  Check high	cpi	0	jnz	WaitCTSLoop 	jmp    RxError3WaitDSR:        lda  SaveIt          cpi     0        rz                         lxi	h,0	;  ConstantWaitDSRLoop:	IN	RS366Reg	ANI	40H	rnz	dcx	h	mov	a,l		;  Check low	cpi	0	jnz	WaitDSRLoop	mov	a,h		;  Check high	cpi	0	jnz	WaitDSRLoop 	mvi    a,20H	call    ExtMDisplay        call    ExtMonitorKeyIn        lda KBbuffer        cpi     36H        rz        cpi     20H        rz        call   ExtTimeDelay        call   ExtBlankIt        lda TestN        call   ExtMPNumber        jmp    WaitDSR		; [ Tx/Rx INITIALIZE SECTION]SIOInit:	LXI h,0	shld Timeout        lhld    ReRout+1	shld    VectChange+1	lhld    ReRout4+1	shld    VectChange1+1PatternSet:	lxi     h,TBuffer        shld    TxCNT        mvi      B,SYCH1	MOV      M,B        MVI      B,1HPatternSet1:	inr     l	MOV     M,B	inr      b	mov     a,l	cpi     0FFH        JZ      ClearR	cpi     0FBH	JNZ     PatternSet1	mvi     b,ETX	jmp     PatternSet1	ClearR:	lxi     h,RBuffer        shld    RxCNT        mvi      B,0	MOV      M,B        ClearR1:	inr     l	MOV     M,B	mov     a,l	cpi     0FFH        jz      RxInit		jmp     ClearR1	RxInit:	MVI	A,ChRst	OUT	ChACont		; Channel A Reset 	MVI	A,REG4	OUT	ChACont		; WR4-Ach selected	lda     SaveIt	cpi     8	jnz     RxInit1	MVI	A,Clk1X+Stop1+ExtSync	jmp     RxInit2RxInit1:	MVI	A,Clk1X+SDLCMRxInit2:	OUT	ChACont		; Clock 1X mode & SDLC Mode	MVI	A,REG5+RstEInt	; WR5-Ach selected	OUT	ChACont		; and Ext. Status Int Reset 	MVI	A,DTR+RTS	; RTS=TEMPORARY!!	OUT	ChACont		; CRC16 & Data Terminal Ready	MVI	A,REG6		; Set SYNC Character	OUT	ChACont	MVI	A,SYCH1	OUT	ChACont	MVI	A,REG7	OUT	ChACont	MVI	A,SDLCFlag	; Set SDLC Flag	OUT	ChACont	MVI	A,REG1+RstEInt	OUT	ChACont		; WR3-Ach selected	MVI	A,IntACRx+SAVect+ExIntEn	OUT	ChACont        MVI	A,REG3+RstRxCRC	OUT	ChACont	lda     SaveIt	cpi     8	jnz     RxInit3	MVI	A,RxCRCEn+RxEnbl+RxBC8+AutoEn	jmp     RxInit4RxInit3:        MVI	A,RxCRCEn+RxEnbl+RxBC8+HuntPh+AdrsSrchRxInit4:	OUT	ChACont        Ret; [ ERROR PROCESSING SECTION]UnExpBSpecInt:	MVI	L,10H	JMP	CheckRetryRxError1:	MVI	L,11H	JMP	CheckRetryLostSync:        MVI	L,12H	JMP	CheckRetryRxError3:	MVI	L,13H	JMP	CheckRetryRSeqError:	MVI	L,14H	JMP	CheckRetryBadInt:	MVI	L,15H	JMP	CheckRetryADRSError:	MVI	L,16H	JMP	CheckRetryUnExpASpecInt:	MVI	L,17H	JMP	CheckRetryDataError:		MVI	L,18H	JMP	CheckRetryBadEnd:                MVI	L,19H	JMP	CheckRetryTSeqError:	MVI	L,1AH	JMP	CheckRetryTxError:        MVI	L,1BH	JMP	CheckRetryNoSioINt:	MVI	L,1CH	JMP	CheckRetryBkRtn:	MVI	L,1DH	JMP	CheckRetryUnExpAStatInt:	MVI	L,1EH	JMP	CheckRetryETXError:	MVI	L,1FH	JMP	CheckRetry	RecCRCError:	MVI	L,21H	JMP	CheckRetryRecRxORun:	MVI	L,22H	JMP	CheckRetryRecParityErr:	MVI	L,23H	JMP	CheckRetry	UnExpBStatInt:	MVI	L,24H	JMP	CheckRetry			CheckRetry:	;lda  RxCNT	;sta   MemSize1	;lda  TxCNT	;sta   MemSize        lda   Retry	cpi 0	jz     ErrorReturn	dcr   a	sta    Retry	call    SIOInit	JMP	TxRxOn1        end@


1.1.1.1
log
@first add
@
text
@@
